(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{722:function(t,a,v){"use strict";v.r(a);var _=v(83),s=Object(_.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"入门"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#入门"}},[t._v("#")]),t._v(" 入门")]),t._v(" "),a("h2",{attrs:{id:"事件是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#事件是什么"}},[t._v("#")]),t._v(" 事件是什么")]),t._v(" "),a("p",[t._v("简单来说，事件是一个底层的 Event Loop 收到消息后调用对应的方法的一个模型，比如给机器人发送消息后框架会调用你定义的方法来执行你的业务代码。")]),t._v(" "),a("h2",{attrs:{id:"属性和注解是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#属性和注解是什么"}},[t._v("#")]),t._v(" 属性和注解是什么")]),t._v(" "),a("p",[t._v("属性（Attribute）是 PHP 8 最大的新变化之一，是 PHP 官方支持的、内置的注解实现，允许我们通过编程方式获取对应的元数据，可以大大方便我们对某一类代码进行处理。")]),t._v(" "),a("p",[t._v("而注解（Annotation）则是在 PHP 尚未支持属性的时代，用来代替的社区实现方案，通过解析 PHPDoc 注释来实现自己的注解机制。")]),t._v(" "),a("p",[t._v("炸毛框架同时支持注解和属性，在文档当中，有时会混用两者的字眼，在大多数情况下都可以安全地交换使用，例如 "),a("code",[t._v("#[BotEvent]")]),t._v(" 和 "),a("code",[t._v("@BotEvent")]),t._v(" 的行为是完全一致的。")]),t._v(" "),a("h2",{attrs:{id:"注解和事件的关系"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注解和事件的关系"}},[t._v("#")]),t._v(" 注解和事件的关系")]),t._v(" "),a("p",[t._v("在炸毛框架中，注解是事件分发的一个重要角色，但注解本身并非事件，更恰当地说，注解代表了事件。")]),t._v(" "),a("p",[t._v("无论是机器人开发过程中场景的 "),a("code",[t._v("#[BotCommand]")]),t._v(" 或是 HTTP 服务的路由 "),a("code",[t._v("#[RequestMapping]")]),t._v(" 都是注解代表事件的例子。")]),t._v(" "),a("h2",{attrs:{id:"阻断事件分发"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#阻断事件分发"}},[t._v("#")]),t._v(" 阻断事件分发")]),t._v(" "),a("p",[t._v("在炸毛框架中，事件由一个统一的事件分发器进行分发，你可以在任意事件中阻断所有后续的分发。")]),t._v(" "),a("p",[t._v("（待考）")])])}),[],!1,null,null,null);a.default=s.exports}}]);